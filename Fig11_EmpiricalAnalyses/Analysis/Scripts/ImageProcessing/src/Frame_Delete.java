
import java.awt.geom.Point2D;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author David
 */
public class Frame_Delete extends javax.swing.JFrame {

    /**
     * Creates new form Frame_Delete
     */
    public Frame_Delete(Frame_DataSampler fds) {
        initComponents();
        this.fds = fds;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ButtonGroup_Delete = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        RadioButton_DeleteAll = new javax.swing.JRadioButton();
        RadioButton_DeleteMostRecent = new javax.swing.JRadioButton();
        TextField_DeleteMostRecent = new javax.swing.JTextField();
        Label_DeleteMostRecent = new javax.swing.JLabel();
        Button_OK = new javax.swing.JButton();
        Button_Cancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Select an option to delete samples"));

        ButtonGroup_Delete.add(RadioButton_DeleteAll);
        RadioButton_DeleteAll.setSelected(true);
        RadioButton_DeleteAll.setText("Delete all samples from current project");

        ButtonGroup_Delete.add(RadioButton_DeleteMostRecent);
        RadioButton_DeleteMostRecent.setText("Delete the ");

        TextField_DeleteMostRecent.setColumns(5);
        TextField_DeleteMostRecent.setText("10");
        TextField_DeleteMostRecent.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextField_DeleteMostRecentKeyPressed(evt);
            }
        });

        Label_DeleteMostRecent.setText("most recent samples from project");

        Button_OK.setText("OK");
        Button_OK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Button_OKMouseClicked(evt);
            }
        });

        Button_Cancel.setText("Cancel");
        Button_Cancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Button_CancelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RadioButton_DeleteAll)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(RadioButton_DeleteMostRecent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TextField_DeleteMostRecent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Label_DeleteMostRecent))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Button_OK)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Button_Cancel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(RadioButton_DeleteAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RadioButton_DeleteMostRecent)
                    .addComponent(TextField_DeleteMostRecent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Label_DeleteMostRecent))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Button_OK)
                    .addComponent(Button_Cancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void handleDeleteAll() {
        String projectFolder = fds.rootDirectory + fds.separator + fds.defaultSamplesDirectory + fds.separator + fds.projectName;
        //  delete project folder            
        deleteDirectory(projectFolder);
        //  reset number sampled
        fds.resetSampleNumber(0);
        //  recreate folders for project
        fds.checkDirectories();
        //  recreate file partition mapping file, if partitioning by file is selected
        if (fds.partitionByFile) {
            fds.appendFilesToPartitionMapping();
            fds.writeSamplePartitionMappingToFile();
        }
    }

    private void handleDeleteMostRecent() {

        //  get number, N, of samples to delete
        String num = this.TextField_DeleteMostRecent.getText();
        if (num == null) {
            return;
        }
        if (num.length() == 0) {
            return;
        }
        int N = Integer.parseInt(num);
        System.out.println("Deleting the " + N + " most recent samples.");

        if (fds.fastMode) {
            handleFastModeDelete(N);
        } else {
            handleDNNSampleDelete(N);
        }

        //  reset number sampled
        System.out.println("Resetting sample number");
        fds.resetSampleNumber(fds.sampleNumber - N);
    }

    private void handleDNNSampleDelete(int N) {
        String projectFolder = fds.rootDirectory + fds.separator + fds.defaultSamplesDirectory + fds.separator + fds.projectName;
        ArrayList<Long> sampleIDs = new ArrayList<Long>();
        //  read in all samples from metadata files from Training, Testing, Validation subdirectories
        for (String type : fds.types) {
            String sampleDataFile = projectFolder + fds.separator + type + fds.separator + fds.dataFile; //not user settable
            System.out.println("Reading samples from " + sampleDataFile);
            BufferedReader reader;
            try {
                reader = new BufferedReader(new FileReader(sampleDataFile));
                String line = reader.readLine(); // skip the header
                line = reader.readLine();
                while (line != null) {
                    String[] data = line.split("\\t", 0);
                    String IDString = data[3]; //dangerous - hardcoded!
                    long ID = Long.parseLong(IDString);
                    sampleIDs.add(ID);
                    line = reader.readLine();
                }
                reader.close();
            } catch (IOException e) {
                System.out.println("No metadata file yet.");
            }
        }
        //  sort samples by timestamp
        System.out.println("Found a total of " + sampleIDs.size() + " samples. Sorting...");
        Collections.sort(sampleIDs, Collections.reverseOrder());
        //  make Set of most recent N samples
        if (sampleIDs.size() < N) {
            System.out.println("There are fewer samples than the requested number to delete. Setting the number of samples to delete to " + sampleIDs.size());
            N = sampleIDs.size();
        }

        List<Long> delList = sampleIDs.subList(0, N); //the "to index" is exclusive 
        Set<Long> delSet = new HashSet<Long>(delList);

        for (String type : fds.types) {
            String sampleDataFile = projectFolder + fds.separator + type + fds.separator + fds.dataFile; //not user settable
            System.out.println("Rewriting " + sampleDataFile);
            //  rewrite each metadata file by going through the Training, Testing, Validation subdirectories printing out only the lines that don't match any of the N timestamps
            rewriteDataFile(sampleDataFile, delSet);
            //  In the Training, Testing, Validation subdirectories, go through the Pixel, Local, Window, Overview, Montage directories and delete each image file that matches any of the N timestamps
            System.out.println("Deleting sampled images from directory " + projectFolder + fds.separator + type);
            deleteSampleImages(projectFolder + fds.separator + type, delSet);
        }
    }

    private void handleFastModeDelete(int N) {
        String sampleDataFile = fds.rootDirectory + fds.separator + fds.defaultSamplesDirectory + fds.separator + fds.projectName + fds.separator + fds.dataFile;
        ArrayList<Long> sampleIDs = new ArrayList<Long>();
        //  read in all samples from metadata files from Training, Testing, Validation subdirectories

        System.out.println("Reading samples from " + sampleDataFile);
        BufferedReader reader;
        try {
            reader = new BufferedReader(new FileReader(sampleDataFile));
            String line = reader.readLine(); // skip the header
            line = reader.readLine();
            while (line != null) {
                String[] data = line.split("\\t", 0);
                String IDString = data[3]; //dangerous - hardcoded!
                long ID = Long.parseLong(IDString);
                sampleIDs.add(ID);
                line = reader.readLine();
            }
            reader.close();
        } catch (IOException e) {
            System.out.println("No metadata file yet.");
        }

        //  sort samples by timestamp
        System.out.println("Found a total of " + sampleIDs.size() + " samples. Sorting...");
        Collections.sort(sampleIDs, Collections.reverseOrder());
        //  make Set of most recent N samples
        if (sampleIDs.size() < N) {
            System.out.println("There are fewer samples than the requested number to delete. Setting the number of samples to delete to " + sampleIDs.size());
            N = sampleIDs.size();
        }

        List<Long> delList = sampleIDs.subList(0, N); //the "to index" is exclusive 
        Set<Long> delSet = new HashSet<Long>(delList);

        System.out.println("Rewriting " + sampleDataFile);
        rewriteDataFile(sampleDataFile, delSet);

    }

    private void Button_OKMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Button_OKMouseClicked

        //Get which button is selected
        boolean all = this.RadioButton_DeleteAll.isSelected();
        //if all
        if (all) {
            int input = JOptionPane.showConfirmDialog(this,
                    "You are about to delete all samples.\nDo you want to proceed?", "Confirm delete...", JOptionPane.OK_CANCEL_OPTION);
            if (input == 0) {
                handleDeleteAll();
            }
        } //if most recent
        else {
            System.out.println("Deleting some samples");
            handleDeleteMostRecent();
        }
        //  reinitialize the set of points that are sampled (for display purposes)
        System.out.println("Resetting sampled points");
        fds.readSampledPixels(true);
        fds.setImageStateHash(true);
        fds.repaint();
        this.setVisible(false);
    }//GEN-LAST:event_Button_OKMouseClicked

    private void TextField_DeleteMostRecentKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextField_DeleteMostRecentKeyPressed
        Frame_Parameters.setIntegerEditable(evt, this.TextField_DeleteMostRecent);
        this.RadioButton_DeleteMostRecent.setSelected(true);
    }//GEN-LAST:event_TextField_DeleteMostRecentKeyPressed

    private void Button_CancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Button_CancelMouseClicked
        this.setVisible(false);
    }//GEN-LAST:event_Button_CancelMouseClicked

    public void deleteSampleImages(String sampleDataFolder, Set<Long> delSet) {

        for (String subfolder : fds.imageTypes) {
            File directory = new File(sampleDataFolder + fds.separator + subfolder);
            //get all the image file names in directory
            String[] files = directory.list();
            //parse each of the file names
            for (String file : files) {
                String items[] = file.split(Pattern.quote("."));
                if (items.length == 4) {
                    //  extract the timestamp unique id
                    String IDString = items[2];
                    long ID = Long.parseLong(IDString);
                    //  check if the unique id is in the delSet, and if so, delete the file
                    if (delSet.contains(ID)) {
                        File toDelete = new File(sampleDataFolder + fds.separator + subfolder + fds.separator + file);
                        toDelete.delete();
                    }
                }
            }
        }
    }

    public void rewriteDataFile(String sampleDataFile, Set<Long> delSet) {
        BufferedReader reader;
        BufferedWriter writer;
        try {
            Path path = Paths.get(sampleDataFile);
            if (Files.exists(path)) {
                writer = new BufferedWriter(new FileWriter(sampleDataFile + ".tmp"));
                reader = new BufferedReader(new FileReader(sampleDataFile));
                String line = reader.readLine(); // skip the header
                writer.write(line + "\n"); // always write the header
                line = reader.readLine();
                while (line != null) {
                    String[] data = line.split("\\t", 0);
                    String IDString = data[3]; //dangerous - hardcoded! Assumes ID (timestamp) is in 4th column
                    long ID = Long.parseLong(IDString);
                    if (!delSet.contains(ID)) {
                        writer.write(line + "\n");
                    }
                    line = reader.readLine();
                }
                reader.close();
                writer.close();
                //move new datafile to old one

                Path source = Paths.get(sampleDataFile + ".tmp");
                Files.move(source, source.resolveSibling(fds.dataFile), StandardCopyOption.REPLACE_EXISTING);
            } else {
                System.out.println(sampleDataFile + " does not exist.");
            }

        } catch (IOException e) {
            System.out.println("Erroe: " + e.getMessage());
        }
    }

    public static void deleteDirectory(String path) {
        System.out.println("Attempting to delete " + path);
        boolean success = true;
        try ( var dirStream = Files.walk(Paths.get(path))) {
            dirStream
                    .map(Path::toFile)
                    .sorted(Comparator.reverseOrder())
                    .forEach(File::delete);
            success = true;
        } catch (IOException ex) {
            System.out.println("Failed to delete! " + ex.getMessage());
            Logger.getLogger(Frame_Delete.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (success) {
            System.out.println("Successfully deleted all samples.");
        }
    }

    private Frame_DataSampler fds;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup ButtonGroup_Delete;
    private javax.swing.JButton Button_Cancel;
    private javax.swing.JButton Button_OK;
    private javax.swing.JLabel Label_DeleteMostRecent;
    private javax.swing.JRadioButton RadioButton_DeleteAll;
    private javax.swing.JRadioButton RadioButton_DeleteMostRecent;
    private javax.swing.JTextField TextField_DeleteMostRecent;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
